name: $(BuildDefinitionName)_$(date:yyyyMMdd)$(rev:.r)

trigger: none
  # branches:
  #   include:
  #     - master

pool:
  vmImage: 'ubuntu-latest'

variables:
  - group: WiseOldTurtleSP  # Variable group containing SP details
  - group: terraform        # Variable group containing Terraform-related variables
  - name: directories
    value:
      networking
      security
      policy

stages:
  - stage: RunTesting
    jobs:
      - job: RunTrivy
        steps:
          # Download and Install Trivy
        - task: CmdLine@2
          displayName: 'Download and Install Trivy vulnerability scanner'
          inputs:
            script: |
              sudo apt-get update
              sudo apt-get install rpm -y
              wget https://github.com/aquasecurity/trivy/releases/download/v0.20.0/trivy_0.20.0_Linux-64bit.deb
              sudo dpkg -i trivy_0.20.0_Linux-64bit.deb
              trivy -v

          # Run Trivy for LOW and MEDIUM severity issues (scans all .tf files within /terraform)
        - task: CmdLine@2
          displayName: 'LOW/MED - Trivy vulnerability scanner in IaC mode for Terraform files'
          inputs:
            script: |
              mkdir -p trivy-reports  # Create a directory to store scan results
              for file in $(find $(System.DefaultWorkingDirectory)/terraform -name "*.tf"); do
              trivy config --severity LOW,MEDIUM --exit-code 0 --format json --output trivy-reports/$(basename $file)_lowmed.json "$file"
              done

          # Run Trivy for HIGH and CRITICAL severity issues (scans all .tf files within /terraform)
        - task: CmdLine@2
          displayName: 'HIGH/CRIT - Trivy vulnerability scanner in IaC mode for Terraform files'
          inputs:
            script: |
              for file in $(find $(System.DefaultWorkingDirectory)/terraform -name "*.tf"); do
              trivy config --severity HIGH,CRITICAL --exit-code 0 --format json --output trivy-reports/$(basename $file)_highcrit.json "$file"
              done

          # Publish Trivy Scan Results as a Build Artifact
        - task: PublishBuildArtifacts@1
          displayName: 'Publish Trivy scan results as a build artifact'
          inputs:
            PathtoPublish: 'trivy-reports'
            ArtifactName: 'TrivyScanResults'
            publishLocation: 'Container'

  - stage: SetupBackend
    jobs:
      - job: CreateBackendResources
        displayName: 'Create Backend Resources'
        steps:
          # Azure CLI Login using Service Principal
          - script: |
              az login --service-principal \
                --username $(TF_VAR_client_id) \
                --password $(TF_VAR_client_secret) \
                --tenant $(TF_VAR_tenant_id)
            displayName: 'Azure Login with SP'

          # Resource Group Creation
          - script: |
              az group create --name $(TF_VAR_RGName) --location "UK South"
            displayName: 'Create Resource Group'

          # Create Storage Account with Private Access
          - script: |
              az storage account create \
                --name $(TF_VAR_StorageAccountName) \
                --resource-group $(TF_VAR_RGName) \
                --location "UK South" \
                --sku Standard_LRS \
                --kind StorageV2 \
                --access-tier Hot 
          #     --public-network-access disabled
            displayName: 'Create Storage Account'

          # Retrieve Storage Account Key for container creation
          - script: |
              STORAGE_ACCOUNT_KEY=$(az storage account keys list \
                --resource-group $(TF_VAR_RGName) \
                --account-name $(TF_VAR_StorageAccountName) \
                --query '[0].value' \
                --output tsv)
              echo "##vso[task.setvariable variable=STORAGE_ACCOUNT_KEY]$STORAGE_ACCOUNT_KEY"
            displayName: 'Retrieve Storage Account Key'

          # Create Storage Container using the retrieved key
          - script: |
              az storage container create \
                --name $(TF_VAR_ContainerName) \
                --account-name $(TF_VAR_StorageAccountName) \
                --account-key $(STORAGE_ACCOUNT_KEY)
            displayName: 'Create Storage Container for Terraform Backend'


  - stage: DeployCoreResources
    jobs:
      - job: TerraformTasks
        displayName: 'Terraform Init and Plan'
        steps:
          # Step 1: Create a directory to store the artifacts
          - script: |
              mkdir -p terraform-artifacts
            displayName: 'Create Artifacts Directory'

          # Step 2: Loop through directories
          - script: |
              # Create a local directory to store the plan files
              mkdir -p terraform-plans

              for dir in $(echo $(directories)); do
                echo "Running Terraform Init and Plan in $dir"
      
                # Navigate to the respective directory
                cd $(System.DefaultWorkingDirectory)/terraform/$dir
      
                # Run Terraform init and pass the Azure DevOps variables
                terraform init \
                -backend-config="storage_account_name=$(TF_VAR_StorageAccountName)" \
                -backend-config="container_name=$(TF_VAR_ContainerName)" \
                -backend-config="key=${dir}.tfstate" \
                -backend-config="resource_group_name=$(TF_VAR_RGName)"
      
                # Run Terraform plan and save the output as a plan file
                terraform plan -out=../../terraform-plans/${dir}.plan

                # Return to the original directory
                cd -
              done
            displayName: 'Run Terraform Init and Plan for all Directories'

          # Task to publish the plan files as build artifacts in a local container
          - task: PublishBuildArtifacts@1
            displayName: 'Publish Terraform Plans as a Build Artifact'
            inputs:
              PathtoPublish: 'terraform-plans'
              ArtifactName: 'TerraformPlans'
              publishLocation: 'Container'

