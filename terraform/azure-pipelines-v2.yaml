name: $(BuildDefinitionName)_$(date:yyyyMMdd)$(rev:.r)

trigger: none
  # branches:
  #   include:
  #     - master

pool:
  vmImage: 'ubuntu-latest'

variables:
  - group: WiseOldTurtleSP  # Variable group containing SP details
  - group: terraform        # Variable group containing Terraform-related variables
  - name: TF_VARS_subscription_id
    value: $(TF_VARS_subscription_id)  # Reference the variable from the Azure DevOps variable group
  - name: directories
    value:
      networking
      security
      policy

stages:
  - stage: RunTesting
    jobs:
      - job: RunTrivy
        steps:
          # Download and Install Trivy
        - task: CmdLine@2
          displayName: 'Download and Install Trivy vulnerability scanner'
          inputs:
            script: |
              sudo apt-get update
              sudo apt-get install rpm -y
              wget https://github.com/aquasecurity/trivy/releases/download/v0.20.0/trivy_0.20.0_Linux-64bit.deb
              sudo dpkg -i trivy_0.20.0_Linux-64bit.deb
              trivy -v

          # Run Trivy for LOW and MEDIUM severity issues (scans all .tf files within /terraform)
        - task: CmdLine@2
          displayName: 'LOW/MED - Trivy vulnerability scanner in IaC mode for Terraform files'
          inputs:
            script: |
              mkdir -p trivy-reports  # Create a directory to store scan results
              for file in $(find $(System.DefaultWorkingDirectory)/terraform -name "*.tf"); do
              trivy config --severity LOW,MEDIUM --exit-code 0 --format json --output trivy-reports/$(basename $file)_lowmed.json "$file"
              done

          # Run Trivy for HIGH and CRITICAL severity issues (scans all .tf files within /terraform)
        - task: CmdLine@2
          displayName: 'HIGH/CRIT - Trivy vulnerability scanner in IaC mode for Terraform files'
          inputs:
            script: |
              for file in $(find $(System.DefaultWorkingDirectory)/terraform -name "*.tf"); do
              trivy config --severity HIGH,CRITICAL --exit-code 0 --format json --output trivy-reports/$(basename $file)_highcrit.json "$file"
              done

          # Publish Trivy Scan Results as a Build Artifact
        - task: PublishBuildArtifacts@1
          displayName: 'Publish Trivy scan results as a build artifact'
          inputs:
            PathtoPublish: 'trivy-reports'
            ArtifactName: 'TrivyScanResults'
            publishLocation: 'Container'

  - stage: SetupBackend
    jobs:
      - job: CreateBackendResources
        displayName: 'Create Backend Resources'
        steps:
          # Azure CLI Login using Service Principal
          - script: |
              az login --service-principal \
                --username $(TF_VAR_client_id) \
                --password $(TF_VAR_client_secret) \
                --tenant $(TF_VAR_tenant_id)
            displayName: 'Azure Login with SP'

          # Resource Group Creation
          - script: |
              az group create --name $(backendRGName) --location "UK South"
            displayName: 'Create Resource Group'

          # Create Storage Account with Private Access
          - script: |
              az storage account create \
                --name $(backendStorageAccountName) \
                --resource-group $(backendRGName) \
                --location "UK South" \
                --sku Standard_LRS \
                --kind StorageV2 \
                --access-tier Hot 
          #     --public-network-access disabled
            displayName: 'Create Storage Account'

          # Retrieve Storage Account Key for container creation
          - script: |
              STORAGE_ACCOUNT_KEY=$(az storage account keys list \
                --resource-group $(backendRGName) \
                --account-name $(backendStorageAccountName) \
                --query '[0].value' \
                --output tsv)
              echo "##vso[task.setvariable variable=STORAGE_ACCOUNT_KEY]$STORAGE_ACCOUNT_KEY"
            displayName: 'Retrieve Storage Account Key'

          # Create Storage Container using the retrieved key
          - script: |
              az storage container create \
                --name $(backendContainerName) \
                --account-name $(backendStorageAccountName) \
                --account-key $(STORAGE_ACCOUNT_KEY)
            displayName: 'Create Storage Container for Terraform Backend'


  - stage: DeployCoreResources
    jobs:
      - job: TerraformTasks
        displayName: 'Terraform Init and Plan'
        steps:
          # Initialize Terraform for each of the directories and run TF Plan
          - script: |
              for dir in $(echo $(directories)); do
                echo "Running Terraform Init and Plan in $dir"
      
                # Navigate to the directories
                cd terraform/$dir
      
                # Run Terraform init and pass ADO variables
                terraform init \
                -var "storage_account_name=$(backendStorageAccountName)" \
                -var "container_name=$(backendContainerName)" \
                -var "state_file=${dir}.tfstate" \
                -var "resource_group_name=$(backendRGName)"
      
                # Run Terraform plan and save the output as a plan file
                terraform plan -out=${dir}.plan

                # Return to the original directory
                cd -
              done
            displayName: 'Run Terraform Init and Plan for all Directories'

          # Create a directory to store plans temporarily
          - script: |
              mkdir -p $(Build.ArtifactStagingDirectory)/plans
              for dir in $(directories); do
                echo "Moving plan for $dir to staging directory"
                mv terraform/$dir/${dir}.plan $(Build.ArtifactStagingDirectory)/plans/${dir}.plan
              done
            displayName: 'Move Plans to Staging Directory'

            # Publish plans as artifacts
          - task: PublishBuildArtifacts@1
            inputs:
              pathToPublish: '$(Build.ArtifactStagingDirectory)/plans'
              artifactName: 'terraform-plans'
              publishLocation: 'Container'
            displayName: 'Publish Terraform Plans as Artifacts'
