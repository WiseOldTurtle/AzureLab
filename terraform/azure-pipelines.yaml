name: $(BuildDefinitionName)_$(date:yyyyMMdd)$(rev:.r)

trigger:
  branches:
    include:
      - master

pool:
  vmImage: 'ubuntu-latest'

variables:
  - group: WiseOldTurtleSP  # Variable group containing SP details
  - group: terraform        # Variable group containing Terraform-related variables
  - name: TF_VARS_subscription_id
    value: $(TF_VARS_subscription_id)  # Reference the variable from the Azure DevOps variable group

stages:
  - stage: SetupBackend
    jobs:
      - job: CreateBackendContainer
        displayName: 'Create Backend Container'
        steps:
          # Step 1: Azure CLI Login using Service Principal
          - script: |
              az login --service-principal \
                --username $(TF_VAR_client_id) \
                --password $(TF_VAR_client_secret) \
                --tenant $(TF_VAR_tenant_id)
            displayName: 'Azure Login with SP'

          # Step 2: Create storage container for the Terraform backend
          - script: |
              az storage container create \
                --name tfstate \
                --account-name $(backendAzureRmStorageAccountName) \
                --resource-group $(backendAzureRmResourceGroupName)
            displayName: 'Create Storage Container for Terraform Backend'

  - stage: DeployResources
    jobs:
      - job: DeployNetworking
        displayName: 'Deploy Networking Resources'
        steps:
          # Step 3: Initialize Terraform and deploy resources for Networking
          - task: TerraformInstaller@0
            displayName: 'Install Terraform'
            inputs:
              terraformVersion: 'latest'

          - task: TerraformTaskV2@2
            displayName: 'Terraform Init (Networking)'
            inputs:
              provider: 'azurerm'
              command: 'init'
              workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/networking'

          - task: TerraformTaskV2@2
            displayName: 'Terraform Plan (Networking)'
            inputs:
              provider: 'azurerm'
              command: 'plan'
              commandOptions: '-var subscription_id=$(TF_VARS_subscription_id)'
              workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/networking'

          - task: TerraformTaskV2@2
            displayName: 'Terraform Apply (Networking)'
            inputs:
              provider: 'azurerm'
              command: 'apply'
              commandOptions: '-auto-approve -var subscription_id=$(TF_VARS_subscription_id)'
              workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/networking'

      - job: DeploySecurity
        displayName: 'Deploy Security Resources'
        steps:
          # Step 4: Initialize Terraform and deploy resources for Security
          - task: TerraformTaskV2@2
            displayName: 'Terraform Init (Security)'
            inputs:
              provider: 'azurerm'
              command: 'init'
              workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/security'

          - task: TerraformTaskV2@2
            displayName: 'Terraform Plan (Security)'
            inputs:
              provider: 'azurerm'
              command: 'plan'
              commandOptions: '-var subscription_id=$(TF_VARS_subscription_id)'
              workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/security'

          - task: TerraformTaskV2@2
            displayName: 'Terraform Apply (Security)'
            inputs:
              provider: 'azurerm'
              command: 'apply'
              commandOptions: '-auto-approve -var subscription_id=$(TF_VARS_subscription_id)'
              workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/security'

      - job: DeployPolicy
        displayName: 'Deploy Policy Resources'
        steps:
          # Step 5: Initialize Terraform and deploy resources for Policy
          - task: TerraformInstaller@0
            displayName: 'Install Terraform'
            inputs:
              terraformVersion: 'latest'

          - task: TerraformTaskV2@2
            displayName: 'Terraform Init (Policy)'
            inputs:
              provider: 'azurerm'
              command: 'init'
              workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/policy'

          - task: TerraformTaskV2@2
            displayName: 'Terraform Plan (Policy)'
            inputs:
              provider: 'azurerm'
              command: 'plan'
              commandOptions: '-var subscription_id=$(TF_VARS_subscription_id)'
              workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/policy'

          - task: TerraformTaskV2@2
            displayName: 'Terraform Apply (Policy)'
            inputs:
              provider: 'azurerm'
              command: 'apply'
              commandOptions: '-auto-approve -var subscription_id=$(TF_VARS_subscription_id)'
              workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/policy'
