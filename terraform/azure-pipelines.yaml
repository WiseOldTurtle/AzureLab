name: $(BuildDefinitionName)_$(date:yyyyMMdd)$(rev:.r)

trigger:
  branches:
    include:
      - master

pool:
  vmImage: 'ubuntu-latest'

variables:
  - group: WiseOldTurtleSP  # Variable group containing SP details
  - group: terraform        # Variable group containing Terraform-related variables
  - name: TF_VARS_subscription_id
    value: $(TF_VARS_subscription_id)  # Reference the variable from the Azure DevOps variable group

stages:
  - stage: SetupBackend
    jobs:
      - job: CreateBackendResources
        displayName: 'Create Backend Resources'
        steps:
          # Step 1: Azure CLI Login using Service Principal
          - script: |
              az login --service-principal \
                --username $(TF_VAR_client_id) \
                --password $(TF_VAR_client_secret) \
                --tenant $(TF_VAR_tenant_id)
            displayName: 'Azure Login with SP'

          # Resource Group Creation
          - script: |
              az group create --name $(backendAzureRmResourceGroupName) --location "UK South"
            displayName: 'Create Resource Group'

          # Create Storage Account with Private Access
          - script: |
              az storage account create \
                --name $(backendAzureRmStorageAccountName) \
                --resource-group $(backendAzureRmResourceGroupName) \
                --location "UK South" \
                --sku Standard_LRS \
                --kind StorageV2 \
                --access-tier Hot 
          #     --public-network-access disabled
            displayName: 'Create Storage Account'

          # # Set Network Rules for Storage Account  
          # - script: |
          #     az storage account network-rule add \
          #       --resource-group $(backendAzureRmResourceGroupName) \
          #       --account-name $(backendAzureRmStorageAccountName) \
          #       --bypass AzureServices \
          #       --vnet \
          #       --subnet 
          #   displayName: 'Configure Network Rules for Storage Account'

          # Retrieve Storage Account Key for container creation
          - script: |
              STORAGE_ACCOUNT_KEY=$(az storage account keys list \
                --resource-group $(backendAzureRmResourceGroupName) \
                --account-name $(backendAzureRmStorageAccountName) \
                --query '[0].value' \
                --output tsv)
              echo "##vso[task.setvariable variable=STORAGE_ACCOUNT_KEY]$STORAGE_ACCOUNT_KEY"
            displayName: 'Retrieve Storage Account Key'

          # Create Storage Container using the retrieved key
          - script: |
              az storage container create \
                --name tfstate \
                --account-name $(backendAzureRmStorageAccountName) \
                --account-key $(STORAGE_ACCOUNT_KEY)
            displayName: 'Create Storage Container for Terraform Backend'


  - stage: DeployCoreResources
    jobs:
      - job: DeployNetworking
        displayName: 'Deploy Networking Resources'
        steps:
          # Step 5: Initialize Terraform and deploy resources for Networking
          - task: TerraformInstaller@0
            displayName: 'Install Terraform'
            inputs:
              terraformVersion: 'latest'

          - task: TerraformTaskV2@2
            displayName: 'Terraform Init (Networking)'
            inputs:
              provider: 'azurerm'
              command: 'init'
              backendServiceArm: 'wiseoldturtle-terraform-sp'
              backendAzureRmResourceGroupName: $(backendAzureRmResourceGroupName)
              backendAzureRmStorageAccountName: $(backendAzureRmStorageAccountName)
              backendAzureRmContainerName: 'tfstate'
              backendAzureRmKey: 'networking.tfstate'
              workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/networking'

          - task: TerraformTaskV2@2
            displayName: 'Terraform Plan (Networking)'
            inputs:
              provider: 'azurerm'
              command: 'plan'
              commandOptions: '-var subscription_id=$(TF_VARS_subscription_id)'
              workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/networking'

          - task: TerraformTaskV2@2
            displayName: 'Terraform Apply (Networking)'
            inputs:
              provider: 'azurerm'
              command: 'apply'
              commandOptions: '-auto-approve -var subscription_id=$(TF_VARS_subscription_id)'
              workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/networking'

      - job: DeploySecurity
        displayName: 'Deploy Security Resources'
        steps:
          # Step 6: Initialize Terraform and deploy resources for Security
          - task: TerraformTaskV2@2
            displayName: 'Terraform Init (Security)'
            inputs:
              provider: 'azurerm'
              command: 'init'
              backendServiceArm: 'wiseoldturtle-terraform-sp'
              backendAzureRmResourceGroupName: $(backendAzureRmResourceGroupName)
              backendAzureRmStorageAccountName: $(backendAzureRmStorageAccountName)
              backendAzureRmContainerName: 'tfstate'
              backendAzureRmKey: 'security.tfstate'
              workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/security'

          - task: TerraformTaskV2@2
            displayName: 'Terraform Plan (Security)'
            inputs:
              provider: 'azurerm'
              command: 'plan'
              commandOptions: '-var subscription_id=$(TF_VARS_subscription_id)'
              workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/security'

          - task: TerraformTaskV2@2
            displayName: 'Terraform Apply (Security)'
            inputs:
              provider: 'azurerm'
              command: 'apply'
              commandOptions: '-auto-approve -var subscription_id=$(TF_VARS_subscription_id)'
              workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/security'

      - job: DeployPolicy
        displayName: 'Deploy Policy Resources'
        steps:
          # Initialize Terraform and deploy resources for Policy
          - task: TerraformInstaller@0
            displayName: 'Install Terraform'
            inputs:
              terraformVersion: 'latest'

          - task: TerraformTaskV2@2
            displayName: 'Terraform Init (Policy)'
            inputs:
              provider: 'azurerm'
              command: 'init'
              backendServiceArm: 'wiseoldturtle-terraform-sp'
              backendAzureRmResourceGroupName: $(backendAzureRmResourceGroupName)
              backendAzureRmStorageAccountName: $(backendAzureRmStorageAccountName)
              backendAzureRmContainerName: 'tfstate'
              backendAzureRmKey: 'policy.tfstate'
              workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/policy'

          - task: TerraformTaskV2@2
            displayName: 'Terraform Plan (Policy)'
            inputs:
              provider: 'azurerm'
              command: 'plan'
              commandOptions: '-var subscription_id=$(TF_VARS_subscription_id)'
              workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/policy'

          - task: TerraformTaskV2@2
            displayName: 'Terraform Apply (Policy)'
            inputs:
              provider: 'azurerm'
              command: 'apply'
              commandOptions: '-auto-approve -var subscription_id=$(TF_VARS_subscription_id)'
              workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/policy'
