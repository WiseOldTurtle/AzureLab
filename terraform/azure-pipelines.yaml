name: $(BuildDefinitionName)_$(date:yyyyMMdd)$(rev:.r)

trigger:
  branches:
    include:
      - master

pool:
  vmImage: 'ubuntu-latest'

variables:
  - group: WiseOldTurtleSP  # Your variable group containing secrets
  - group: terraform


stages :
  - stage: InitialTerraformTasks
    jobs:
    - job: validate
      continueOnError: false
      steps:
      - task: TerraformInstaller@0
        displayName: 'install'
        inputs:
          terraformVersion: 'latest'
      
      - task: TerraformTaskV2@2
        displayName: 'TF INIT'
        inputs:
          provider: 'azurerm'
          command: 'init'
          backendServiceArm: 'wiseoldturtle-terraform-sp'
          backendAzureRmResourceGroupName: $(backendAzureRmResourceGroupName)
          backendAzureRmStorageAccountName: $(backendAzureRmStorageAccountName)
          backendAzureRmContainerName: $(backendAzureRmContainerName)
          backendAzureRmKey: 'prod.terraform.tfstate'
      
      - task: TerraformTaskV2@2
        displayName: 'TF Validate'
        inputs:
          provider: 'azurerm'
          command: 'validate'

  - stage: DeployLandingZone
    jobs:
      - job: DeployCoreResources
        displayName: 'Run Terraform Commands'
        steps:
          - script: |
              echo "Generating terraform.tfvars for Networking"
              envsubst < terraform/networking/terraform.tfvars.template > terraform/networking/terraform.tfvars
              cd terraform/networking
              terraform init
              echo "Generating Terraform Plan for Networking"
              terraform plan -input=false -var CLIENT_SECRET=$(TF_VARS_client_secret) -var-file=terraform.tfvars
          #    terraform apply -var-file=terraform.tfvars -input=false -auto-approve
            displayName: 'Run Terraform for Networking'

          # - script: |
          #     echo "Generating terraform.tfvars for Security"
          #     envsubst < LZ-Terraform/security/terraform.tfvars.template > LZ-Terraform/security/terraform.tfvars
          #     cd LZ-Terraform/security
          #     terraform init
          #     terraform plan -var-file=terraform.tfvars -input=false
          #     terraform apply -var-file=terraform.tfvars -input=false -auto-approve
          #   displayName: 'Run Terraform for Security'

          # - script: |
          #     echo "Generating terraform.tfvars for Policy"
          #     envsubst < LZ-Terraform/policy/terraform.tfvars.template > LZ-Terraform/policy/terraform.tfvars
          #     cd LZ-Terraform/policy
          #     terraform init
          #     terraform plan -var-file=terraform.tfvars -input=false
          #     terraform apply -var-file=terraform.tfvars -input=false -auto-approve
          #   displayName: 'Run Terraform for Policy'      
 
      # - task: TerraformTaskV2@2
      #   displayName: 'apply'
      #   inputs:
      #     provider: 'azurerm'
      #     command: 'apply'
      #     commandOptions: '-input=false -var name=$(name) -var environment=$(Environment) -var-file="../terraform/environments/$(Environment)/$(Environment).tfvars"'
      #     environmentServiceNameAzureRM: 'thomasthorntoncloud'
      #     workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/'